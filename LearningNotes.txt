
Microservices Architecture:
    Gateway APIs : Entrypoint for client request and collecting data from one or more small Microservices.
         Reverse Proxy of Gateway Routing: Internal routing gives a decoupling of internal services and client.
         Request Aggregation: Multiple client requests to be aggregated
         Azure API Management can be used to leverage Gateway APIs
         Ocelot (.Net Core based API)

    CQRS (Command And Query Responsibility )


Smart Endpoints,& Dumb Pipes

Communication Types:
 2 Axes:
  Synchronous Protocol :  Http (it's a Synchronous Protocol based on request/response model)
  Asyncnronous Protocol: other Protocols like AMQP, Messaging
 
  Single Receiver : Command Pattern
  Multiple Receivers: must always be Asyncnronous

  Eventbus, AMQP, Http Polling are few asynchronous Protocol.

  Integration Events 
  

  Microservices: 
    Versioning Microservices APIs & Contracts
    Microservices addressability & the service registry
    Composite UI Micro FrontEnd (Instead of heavy Monolithic UI)
    Security, 
    Resiliency & High Availability
    Health Management & Diagnostics
        HealthChecks tools like ASPNetCore.Diagnostics.HealthChecks. Performs 2 types of HealthChecks   
            Liveness: Check if Microservice is alive
            Readiness: Check if Microservice's dependencies are ready themselves(Database, Queue Service)
        
        Diagnostics tools like Azure Monitor, Azure Diagnostics, Splunk
    
    Orchestrator(Clusters) managing health & Diagnostics information.
        Lifecycle Management
        Independent Scaling
        Independent Updates
        Always on Availability
        Resource Efficient
        Stateless/stateful

    
    
    SLA - Service Level Agreement
     -  The uptime % of a cloud service
     95
     99
     99.9
     99.99
     Always check the SLA of the service used

     SLA calculation:
      SLA of 1 service * SLA of 2nd Service (/100 percentage)


    Read it: 
     4 main services
         Books Catalog
         Shopping Cart 
         Inventory Management
         Order Engine 
         

    Azure Networking.
        VNet
        Resources in single VNet can communicate with each other by default
        But cannot communicate with resources in other vnet by default
    In AWS, VNET is called as VPC (virtual Private Cloud)
    VNets are free, limit of 50 Vnets per subsription

    Vnet is scoped to a single region
    VNet is scoped to single subsription
    VNet can be connected via Peering
    Can be segmented using subnets (logical group of resources within a vnet)
    Protected using NSG(on subnets)
    Each VNet has it own range

    CIDR notation
        : Classless Inter-Domain Routing
        Number between 0 and 32

        0-256.0-256.0-256.0-256

    Subnet:
     A logical Segment of VNET
     Shares a subset of VNETs IP range
     Resources must be placed in subnet and not directly in Vnet
     Resources can communicate with each other across subnets within same VNet
     Network Interface or NIC(Virtual Network Card) connects the resource to VNet

NSG: Network Security Group
    A gatekeeper for subnets
    kind of a mini firewall

    5 Tuples:
        Source
        Source Port 
        Destination
        Destination Port
        Protocol

    Based on above 5 tuples, a connection is allowed or denied
    this is called Security rule
    Each rule is assigned a Number
    The lower the number, the higher the priority of the rule

    Network Peering: 
    Allow 2 Vnets to communicate each other
    Not free

    Secure VM access (all 4 will cost)
        JIT access - requires Security centre license upgrade
        VPN - a secure tunnel to VNet
        Jump Box - Place another VM in vnet
        Bastion -  web based connection to VM ()

Service Endpoint:
    Creates a route from VNet to the Managed Service
    Enable Service Endpoint on the subnet from which we want to access the resource
    free

Private Link:
    Extends the managed service into the VNet
    not free


Service Endpoint vs Private Link

VNet Integration:
 Allows access from appservice to resources within VNet
 Support Same region Vnet.
 For different region Vnet access a gateway will be required.

 SE/PL vs VNetIntegration
  SE/PL : allows connections from Vnet to managed service
  Vnet Integration: allows connection from Managed service (app service) to Vnet resources

Load Balancer:
   Azure Service that distributes load and check health of VMs
   When a VM is not healthy, no traffic is directed to it.
   Works on Layer 4 (out of the 7 models OSI explained below)

7 Layers Model (OSI model)
  Physical
  Data Link
  Network
  Transport - IP, Port, Protocol(TCP)
  Session
  Presentation
  Application - 

Load Balancr Distribution algorithm - 5 tuples
same as that of NSG (source ip, source port, destination ip, destination port, protocol)

Application Gateway - Next version of load balancer with more security (sort of web traffic load balancer)
    can interact with the top layer (7th layer) i.e. application
    WAF (Web Application firewall)

Hub and Spoke Network Design
Every Layer should reside in it's own vnet


Azure SQL

Cosmos DB:
    No-sql, distributed

    5 types of consistency Levels (commit in all replicas)
        Strong - region X, region Y will always have same data(used for mission critical data)
        Bounded Staleness - Region Y will lag behind region X by K versions or T time (max 2 versions)
                            Keeps the order of versions
                            used for low write latency when order is important
        Session consistency: In a client session - strong consistency, other clients- consistent prefix
        Consistent Prefix: Keeps the order of versions
                           No guarantee of log size(as opposed to Bounded Staleness)
                           Used for low write latency and when reads are infrequent

        Eventual: No guarantee of log size, No order guarantee, used for count of Retweets,likes etc.

    Cosmos DB consistency level can be 
        Configured at account level
        Can be relaxed on the request level
        

Azure Storage:
    Redundancy (6 options)
    LRS: Locally redundant (data is synchronously copied 3 times within same zone)
    ZRS: Zone redundant(data is synchronously copied to 3 zones within same region)
    GRS: Geo redundant (data is synchronously copied 3 times within same zone and then copied asynchronously to paired region). read access to secondary region in case of failover only
    GZRS: Geo Zone redundant (data is synchronously copied to 3 zones within same region and then copied asynchronously to paired region)
    RA-GRS: Read access Geo redudant (data is synchronously copied 3 times within same zone and then copied asynchronously to paired region) but with read acces in secondary region.
    RA-GZRS Read acces Geo Zone redudant (similar to GZRS) but with read access is allowed to secondary region

    failover can be initiated for azure storage via
        cli
        portal
        power shell

    3 tiers of blobs:
        Hot - accessed frequently
        Cool - accessed infrequently
        Archive - Data for archival (does not support - ZRS, GRS, RA-GRS)



