
Microservices Architecture:
    Gateway APIs : Entrypoint for client request and collecting data from one or more small Microservices.
         Reverse Proxy of Gateway Routing: Internal routing gives a decoupling of internal services and client.
         Request Aggregation: Multiple client requests to be aggregated
         Azure API Management can be used to leverage Gateway APIs
         Ocelot (.Net Core based API)

    CQRS (Command And Query Responsibility )


Smart Endpoints,& Dumb Pipes

Communication Types:
 2 Axes:
  Synchronous Protocol :  Http (it's a Synchronous Protocol based on request/response model)
  Asyncnronous Protocol: other Protocols like AMQP, Messaging
 
  Single Receiver : Command Pattern
  Multiple Receivers: must always be Asyncnronous

  Eventbus, AMQP, Http Polling are few asynchronous Protocol.

  Integration Events 
  

  Microservices: 
    Versioning Microservices APIs & Contracts
    Microservices addressability & the service registry
    Composite UI Micro FrontEnd (Instead of heavy Monolithic UI)
    Security, 
    Resiliency & High Availability
    Health Management & Diagnostics
        HealthChecks tools like ASPNetCore.Diagnostics.HealthChecks. Performs 2 types of HealthChecks   
            Liveness: Check if Microservice is alive
            Readiness: Check if Microservice's dependencies are ready themselves(Database, Queue Service)
        
        Diagnostics tools like Azure Monitor, Azure Diagnostics, Splunk
    
    Orchestrator(Clusters) managing health & Diagnostics information.
        Lifecycle Management
        Independent Scaling
        Independent Updates
        Always on Availability
        Resource Efficient
        Stateless/stateful

    
    